// schema.prisma

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model member {
  memberId     String   @id @default(uuid())  // @default(uuid()) 추가
  email        String   @unique
  password     String
  nickname     String
  loginStatus  String
  wishlist     Wishlist[]
  reviews      Review[]
  posts        Post[]
}


model Wishlist {
  wishlistId String @id
  memberId   String
  musicalId  String
  member     member @relation(fields: [memberId], references: [memberId])
  musical    Musical @relation(fields: [musicalId], references: [musicalId])
}

model Musical {
  musicalId        String         @id
  name             String
  startDate        DateTime
  endDate          DateTime
  status           String
  details          MusicalDetail?
  reviews          Review[]
  wishlists        Wishlist[]
  posts            Post[]
}

model MusicalDetail {
  id               String         @id @default(uuid())
  musicalId        String         @unique
  facilityName     String
  cast             String
  runtime          Int
  ageRating        String
  productionCompany String
  ticketPrice      String
  posterImagePath  String
  synopsis         String
  genre            String
  introImages      Json
  showtimes        String
  facilityDetails  String
  ticketAgencies   TicketAgency[]

  musical          Musical        @relation(fields: [musicalId], references: [musicalId])
}

model TicketAgency {
  id               String         @id @default(uuid())
  name             String
  code             String
  url              String
  musicalDetailId  String
  musicalDetail    MusicalDetail  @relation(fields: [musicalDetailId], references: [id])
}

model Review {
  reviewId   String  @id
  memberId   String
  musicalId  String
  rating     Float
  title      String
  content    String
  member     member @relation(fields: [memberId], references: [memberId])
  musical    Musical @relation(fields: [musicalId], references: [musicalId])
}

model Post {
  postId      String   @id
  memberId    String
  musicalId   String
  title       String
  content     String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  likeCount   Int
  warningCount Int
  category    String
  member      member @relation(fields: [memberId], references: [memberId])
  musical     Musical @relation(fields: [musicalId], references: [musicalId])
}

model Post {
    post_id BigInt @id @default(autoincrement())
    member_id BigInt
    title String
    content String
    created_at DateTime @default(now())
    updated_at DateTime? @updatedAt
    is_deleted Boolean @default(false)
    like_count Int @default(0)
    warning_count Int @default(0)
    reply_count Int @default(0)
    views Int @default(0)
    category String

    member Member @relation(fields: [member_id], references: [member_id])

    @@map("post")
}