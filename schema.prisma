generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "mysql"
    url      = env("DATABASE_URL")
}


model Musical {
    name           String
    status         String
    averageRating  Float          @default(0)
    endDate        DateTime       @default(now()) // 기본값 추가
    musicalId      BigInt         @id @default(autoincrement())
    startDate      DateTime       @default(now()) // 기본값 추가
    details        MusicalDetail?
    posts          Post[]
    reviews        Review[]
    wishlists      Wishlist[]

    @@map("musical")
}

model MusicalDetail {
   id                 BigInt         @id @default(autoincrement())
    musicalId          BigInt         @unique
    facilityName       String         @default("") // 공연 시설 이름
    cast               String         @default("") // 공연 출연진
    runtime            Int?            // 공연 런타임
    ageRating          String         @default("") // 공연 연령
    productionCompany  String         @default("") // 제작사
    ticketPrice        String         @default("") // 티켓 가격
    posterImagePath    String         @default("") // 공연 포스터
    synopsis           String         @default("") // 공연 줄거리
    genre              String         @default("") // 장르
    introImages        Json           @default("{}") // 공연 이미지
    showtimes          String         @default("") // 공연 시간
    facilityDetails    String         @default("") // 공연 시설 정보
    musical            Musical        @relation(fields: [musicalId], references: [musicalId])
    ticketAgencies  Json       // JSON field for ticket agency information

   @@index([musicalId], name: "MusicalDetail_musicalId_idx")
   @@map("musical_detail")
}

model TicketAgency {
  agencyId   BigInt    @id @default(autoincrement())
  agencyName String
  url        String

  @@unique([agencyName, url])
}

model Member {
  memberId     BigInt      @id @default(autoincrement())
  username     String      @unique
  password     String
  nickname     String
  refreshToken String?     

  posts        Post[]
  comments     Comment[]
  replies      Reply[]
  reviews      Review[]
  wishlists    Wishlist[]

  @@map("member")
}

model Post {
  postId       BigInt       @id @default(autoincrement())
  memberId     BigInt
  title        String
  content      String
  sample       String
  createdAt    DateTime      @default(now())
  updatedAt    DateTime?     @updatedAt
  isDeleted    Boolean       @default(false)
  likeCount    Int           @default(0)
  warningCount Int           @default(0)
  replyCount   Int           @default(0)
  views        Int           @default(0)
  category     String
  musicalId    BigInt?
  musical      Musical?      @relation(fields: [musicalId], references: [musicalId])
  member       Member        @relation(fields: [memberId], references: [memberId])
  comments     Comment[]
  replies      Reply[]

  @@map("post")
}

model Comment {
  commentId    BigInt        @id @default(autoincrement())
  content      String
  createdAt    DateTime      @default(now())
  updatedAt    DateTime?     @updatedAt
  isDeleted    Boolean       @default(false)
  likeCount    Int           @default(0)
  warningCount Int           @default(0)
  replyCount   Int           @default(0)
  postId       BigInt
  post         Post          @relation(fields: [postId], references: [postId])
  memberId     BigInt
  member       Member        @relation(fields: [memberId], references: [memberId])
  parentId     BigInt?
  parent       Comment?      @relation("CommentToComment", fields: [parentId], references: [commentId])
  replies      Comment[]     @relation("CommentToComment")

  @@map("comment")
}

model Reply {
  commentId   BigInt      @id @default(autoincrement())
  replyId     BigInt?
  postId      BigInt
  memberId    BigInt
  content     String
  createdAt   DateTime    @default(now())
  updatedAt   DateTime?   @updatedAt
  isDeleted   Boolean     @default(false)
  member      Member      @relation(fields: [memberId], references: [memberId])
  post        Post        @relation(fields: [postId], references: [postId])

  @@index([memberId], map: "reply_member_id_fkey")
  @@index([postId], map: "reply_post_id_fkey")
  @@map("reply")
}

model Review {
  reviewId     BigInt      @id @default(autoincrement())
  rating       Int
  content      String
  createdAt    DateTime    @default(now())
  warningCount Int         @default(0)
  memberId     BigInt
  musicalId    BigInt
  member       Member      @relation(fields: [memberId], references: [memberId])
  musical      Musical     @relation(fields: [musicalId], references: [musicalId])

  @@index([memberId], map: "review_member_id_fkey")
  @@index([musicalId], map: "review_musical_id_fkey")
  @@map("review")
}

model Wishlist {
  wishlistId   BigInt      @id @default(autoincrement())
  memberId     BigInt
  musicalId    BigInt
  member       Member      @relation(fields: [memberId], references: [memberId])
  musical      Musical     @relation(fields: [musicalId], references: [musicalId])

  // Composite unique constraint
  @@unique([memberId, musicalId])  // Composite unique constraint
  @@index([memberId], map: "wishlist_member_id_fkey")
  @@index([musicalId], map: "wishlist_musical_id_fkey")

  @@map("wishlist")
}
